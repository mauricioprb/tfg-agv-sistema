generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_LOCAL")
}

// Padr√£o do next-auth
model User {
  id                String              @id @default(uuid())
  name              String?             @map("nome")
  email             String              @unique @map("email")
  emailVerified     DateTime?           @map("email_verificado")
  image             String?             @map("imagem")
  accounts          Account[]
  sessions          Session[]
  createdAt         DateTime            @default(now()) @map("criado_em")
  updatedAt         DateTime            @updatedAt @map("atualizado_em")
  AGV               Agv[]
  RegistroAtividade RegistroAtividade[]

  @@map("usuarios")
}

model Account {
  userId            String   @map("usuario_id")
  type              String   @map("tipo")
  provider          String   @map("provedor")
  providerAccountId String   @map("id_conta_provedor")
  refresh_token     String?  @map("refresh_token")
  access_token      String?  @map("access_token")
  expires_at        Int?     @map("expira_em")
  token_type        String?  @map("tipo_token")
  scope             String?  @map("escopo")
  id_token          String?  @map("id_token")
  session_state     String?  @map("estado_sessao")
  createdAt         DateTime @default(now()) @map("criado_em")
  updatedAt         DateTime @updatedAt @map("atualizado_em")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("contas")
}

model Session {
  sessionToken String   @unique @map("token_sessao")
  userId       String   @map("usuario_id")
  expires      DateTime @map("expira_em")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("criado_em")
  updatedAt    DateTime @updatedAt @map("atualizado_em")

  @@map("sessoes")
}

model Agv {
  id                  String              @id @default(uuid())
  status              String
  tempoOperacao       Float               @default(0) @map("tempo_operacao")
  distanciaPercorrida Float               @map("distancia_percorrida")
  usuarioId           String              @map("usuario_id")
  transportes         Transporte[]
  usuario             User                @relation(fields: [usuarioId], references: [id])
  criadoEm            DateTime            @default(now()) @map("criado_em")
  atualizadoEm        DateTime            @updatedAt @map("atualizado_em")
  Alerta              Alerta[]
  RegistroAtividade   RegistroAtividade[]

  @@map("agv")
}

model Transporte {
  id         String   @id @default(uuid())
  rotaId     String   @map("rota_id")
  status     String
  finalizado Boolean
  agvId      String   @map("agv_id")
  rota       Rota     @relation(fields: [rotaId], references: [id])
  agv        Agv      @relation(fields: [agvId], references: [id])
  cargas     Carga[]  @relation("TransporteCargas")
  criadoEm   DateTime @default(now()) @map("criado_em")

  @@map("transportes")
}

model Carga {
  id           String       @id @default(uuid())
  comprimento  Float
  peso         Float
  altura       Float
  largura      Float
  tipo         String
  quantidade   Int
  transportes  Transporte[] @relation("TransporteCargas")
  criadoEm     DateTime     @default(now()) @map("criado_em")
  atualizadoEm DateTime     @updatedAt @map("atualizado_em")

  @@map("cargas")
}

model Rota {
  id          String       @id @default(uuid())
  nome        String       @unique
  transportes Transporte[]
  criadoEm    DateTime     @default(now()) @map("criado_em")

  @@map("rotas")
}

model RegistroAtividade {
  id        String   @id @default(uuid())
  evento    String
  criadoEm  DateTime @default(now()) @map("criado_em")
  agvId     String?
  usuarioId String?  @map("usuario_id")
  usuario   User?    @relation(fields: [usuarioId], references: [id])
  Agv       Agv?     @relation(fields: [agvId], references: [id])

  @@map("registro_atividades")
}

model Alerta {
  id        String   @id @default(uuid())
  descricao String
  agvId     String   @map("agv_id")
  agv       Agv      @relation(fields: [agvId], references: [id])
  criadoEm  DateTime @default(now()) @map("criado_em")

  @@map("alertas")
}
